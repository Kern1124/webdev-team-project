//
//
// IMPORTANT: Do NOT modify this file
//
//
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Publisher {
  id         String      @id @default(uuid())
  name       String      @unique
  newspapers Newspaper[]
  users      User[]
}

model User {
  id            String    @id @default(uuid())
  publisher     Publisher? @relation(fields: [publisherId], references: [id])
  publisherId   String?
  username      String    @unique
  email         String    @unique
  passwordHash  String
  articles      Article[]
  comments      Comment[]
  userRole      String
  userRoles     Role[]
}

model Role {
  id        String    @id @default(uuid())
  name      String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  newspaper    Newspaper @relation(fields: [newspaperId], references: [id])
  newspaperId  String
}

model Newspaper {
  id          String           @id @default(uuid())
  publisher   Publisher        @relation(fields: [publisherId], references: [id])
  publisherId String
  name        String           @unique
  newspaperCopies Newspaper_copy[]
  userRoles   Role[]
  newspaperImg  String         @default("")
}

model Newspaper_copy {
  id          String    @id @default(uuid())
  date        DateTime  @default(now())
  newspaper   Newspaper @relation(fields: [newspaperId], references: [id])
  newspaperId String
  articles    Article[]
  published   Boolean   @default(false)
}

model Article {
  id              String         @id @default(uuid())
  heading         String
  contents        String
  newspaper_copy  Newspaper_copy @relation(fields: [newspaperCopyId], references: [id], onDelete: Cascade)
  newspaperCopyId String
  author          User           @relation(fields: [authorId], references: [id])
  authorId        String
  categories      Category[]
  comments        Comment[]
  approved        Boolean        @default(false)
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  articles Article[]
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
}
