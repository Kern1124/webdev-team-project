//
//
// IMPORTANT: Do NOT modify this file
//
//
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Publisher {
  id        String       @id @default(uuid())
  name      String       @unique 
  newspapers Newspaper[]
  users     User[]
}

model User {
  id            String    @id @default(uuid())
  publisher     Publisher? @relation(fields: [publisherId], references: [id])
  publisherId   String?
  username      String
  email         String
  passwordHash  String
  userRoles     UserRole[]
  articles      Article[]
  comments      Comment[]
  
}

model Role {
  id        String    @id @default(uuid())
  name      String
  userRoles UserRole[]
}

model UserRole {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  newspaper    Newspaper? @relation(fields: [newspaperId], references: [id])
  newspaperId  String?
}

model Newspaper {
  id          String           @id @default(uuid())
  publisher   Publisher        @relation(fields: [publisherId], references: [id])
  publisherId String
  name        String
  newspaperCopies Newspaper_copy[]
  userRoles   UserRole[]
}

model Newspaper_copy {
  id          String      @id @default(uuid())
  issueNr     Int         @unique
  date        DateTime    @default(now())
  newspaper   Newspaper   @relation(fields: [newspaperId], references: [id])
  newspaperId String
  articles    Article[]
}


model Article {
  id             String            @id @default(uuid())
  contents       String
  newspaper_copy Newspaper_copy   @relation(fields: [newspaperCopyId], references: [id])
  newspaperCopyId String
  author         User              @relation(fields: [authorId], references: [id])
  authorId       String
  categories     Category[]
  comments       Comment[]
}

model Category {
  id          String            @id @default(uuid())
  name        String
  articles    Article[]
}

model Comment {
  id         String  @id @default(uuid())
  content    String
  article    Article @relation(fields: [articleId], references: [id])
  articleId  String
  author     User    @relation(fields: [authorId], references: [id])
  authorId   String
}